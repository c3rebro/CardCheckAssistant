<Page x:Class="CardCheckAssistant.Views.Step2Page"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:extensions="using:CardCheckAssistant.Extensions"
      xmlns:models="using:CardCheckAssistant.Models"
      xmlns:viewmodels="using:CardCheckAssistant.ViewModels"
      xmlns:ctWinUI="using:CommunityToolkit.WinUI.UI"
      xmlns:ctWinUIConv="using:CommunityToolkit.WinUI.UI.Converters"
      Loaded="Page_Loaded"
      mc:Ignorable="d"
      Background="Transparent">

    <Page.Resources>
        <ctWinUIConv:BoolToVisibilityConverter x:Key="boolean" />
    </Page.Resources>
    
    <Page.DataContext>
        <viewmodels:Step2PageViewModel />
    </Page.DataContext>

    <Grid Margin="0 0 0 80">
        <!-- Beef -->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="20"/>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="0.1*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <Border
            Grid.Row="0"
            CornerRadius="8,8,8,8" Grid.ColumnSpan="4" Grid.RowSpan="7">
            <Border>
                <Border.Background>
                    <RadialGradientBrush>
                        <GradientStop Offset="0" Color="#1F000000" />
                        <GradientStop Offset="1" Color="#4F000000" />
                    </RadialGradientBrush>
                </Border.Background>

                <Grid>
                    <StackPanel
                        Orientation="Horizontal"
                        VerticalAlignment="Bottom"
                        HorizontalAlignment="Right">
                        <TextBlock
                        Margin="12"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Bottom"
                        FontSize="12"
                        Text="Aktueller Auftrag:" />
                        <TextBlock
                        Margin="12"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Bottom"
                        FontSize="12"
                        Text="{Binding JobNumber}" />
                    </StackPanel>

                </Grid>

            </Border>
        </Border>

        <ProgressRing 
            Grid.Column="0"
            Grid.Row="0"
            Grid.ColumnSpan="4"
            Grid.RowSpan="7"
            Width="auto"
            Height="auto"
            MaxWidth="250"
            MaxHeight="250"
            Margin="10"
            VerticalContentAlignment="Stretch"
            HorizontalContentAlignment="Stretch"
            Visibility="{Binding TextBlockCheckNotYetFinishedIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
        </ProgressRing>

        <TextBlock 
            Margin="8,8,0,0" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="4" 
            Grid.Column="0" 
            Grid.Row="0"
            Visibility="{Binding TextBlockCheckNotYetFinishedIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="RFiDGear wird gestartet...&#x0a;"></Run>
        </TextBlock>

        <TextBlock 
            Margin="8,8,0,0" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="4" 
            Grid.Column="0" 
            Grid.Row="0"
            Visibility="{Binding TextBlockCheckFinishedAndResultIsNotSuppIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="RFiDGear hat die Karte geprüft und ist zu folgendem Ergebnis gekommen:&#x0a;
            &#xa;Die Kartentechnologie wird leider nicht Unterstützt. Weitere Details sind dem erstelleten Bericht zu entnehmen."></Run>
        </TextBlock>
        
        <TextBlock 
            Margin="8,8,0,0" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="4" 
            Grid.Column="0" 
            Grid.Row="0"
            Visibility="{Binding TextBlockCheckFinishedAndResultIsSuppOnlyIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="RFiDGear hat die Karte geprüft und ist zu folgendem Ergebnis gekommen:&#x0a;
            &#xa;Die Kartentechnologie wird Unterstützt. Aber: Die Karte ist so in der LSM nicht programmierbar. Weitere Details sind dem erstelleten Bericht zu entnehmen:"></Run>
        </TextBlock>

        <TextBlock 
            Margin="8,8,0,8" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="4" 
            Grid.Column="0" 
            Grid.Row="0"
            Visibility="{Binding TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="RFiDGear hat die Karte geprüft und ist zu folgendem Ergebnis gekommen:
                 &#x0a;
                 &#x0a;Die Kartentechnologie wird Unterstützt und sollte in der LSM programmierbar sein.
                 &#xa;
                 &#xa;Bitte nimm den Chip vom Leser und fahre mit dem Prüfvorgang in der LSM fort. Kehre im Anschluss hierher zurück und lege den Chip wieder auf den Leser.
                 &#xa;"></Run>
            <Run Foreground="Crimson" FontWeight="ExtraBold" Text="&#xa;ACHTUNG: Vor dem nächsten Schritt muss der Bericht noch mit dem Prüfergebnis aus dem Programmiervorgang in der LSM vervollständigt und dann mit der Schaltfläche &quot;READ ONLY&quot; (Im PDF ganz unten links) geschlossen werden. Anderenfalls kann der Kunde den Bericht selbst verändern!"></Run>
        </TextBlock>
        
        <HyperlinkButton 
            Margin="8,0" 
            Grid.Column="0" 
            Grid.Row="1" 
            Content="Bericht aufrufen" 
            Command="{Binding OpenReportCommand}"
            Visibility="{Binding HyperlinkButtonReportIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
        
        <HyperlinkButton 
            Margin="8,0" 
            Grid.Column="0" 
            Grid.Row="2" 
            Content="Speicherpfad anzeigen" 
            Command="{Binding OpenReportPathCommand}"
            Visibility="{Binding HyperlinkButtonReportIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>

        <TextBlock 
            Margin="8,8,0,0" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="4" 
            Grid.Column="0" 
            Grid.Row="3"
            Visibility="{Binding TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Klicke danach auf Weiter, um zum letzten Schritt zu gelangen.
                 &#xa;"></Run>
        </TextBlock>

        <TextBlock 
            Margin="8,8,0,0" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="4" 
            Grid.Column="0" 
            Grid.Row="4"
            Visibility="{Binding TextBlockCheckFinishedAndResultIsMissingPICCKeyIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Zusatz: Die Kartentechnologie wird zwar Unterstütz, es fehlet jedoch der Zugriffsschlüssel. (Allow Create/Delete = false)&#x0a;
            &#xa;Es besteht nun die möglichkeit, den Einsender der Karte über das Ergebnis zu informieren und ggf. weitere Informationen zu erbitten. Wähle hierfür bitte eine Textvorlage aus. Der Einsender hat 14 Tage Zeit diese Informationen zu übermitteln um die Prüfung erneut durch zu führen. Nach Ablauf der Zeit wird der Vorgang automatisch geschlossen."></Run>
        </TextBlock>

        <TextBlock 
            Margin="8,8,0,0" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="4" 
            Grid.Column="0" 
            Grid.Row="4"
            Visibility="{Binding TextBlockCheckFinishedAndResultIsNotEnoughMemoryIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Die Kartentechnologie wird zwar Unterstütz, es ist jedoch kein Speicher mehr frei. (Free Memory &lt;= 224 Bytes)&#x0a;
            &#xa;Es besteht nun die möglichkeit, den Einsender der Karte über das Ergebnis zu informieren und ggf. weitere Informationen zu erbitten. Wähle hierfür bitte eine Textvorlage aus. Der Einsender hat 14 Tage Zeit diese Informationen zu übermitteln um die Prüfung erneut durch zu führen. Nach Ablauf der Zeit wird der Vorgang automatisch geschlossen."></Run>
        </TextBlock>
        
        <TextBlock 
            Margin="8,16,16,16"
            Grid.ColumnSpan="3" 
            Grid.Column="0" 
            Grid.Row="5" 
            VerticalAlignment="Center" 
            Visibility="{Binding TextBlockCheckFinishedAndResultIsSuppOnlyIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Bitte eine Textvorlage auswählen:"/>
        </TextBlock>
        <ComboBox 
            Grid.ColumnSpan="1" 
            Grid.Column="3" 
            Grid.Row="5" 
            VerticalAlignment="Center" 
            ItemsSource="{ctWinUI:EnumValues Type=models:CustomerRequestTemplate}" 
            Visibility="{Binding TextBlockCheckFinishedAndResultIsSuppOnlyIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            SelectedItem="{Binding SelectedCustomerRequestTemplate, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>

        <TextBlock 
            Margin="8,8" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="4" 
            Grid.Column="0" 
            Grid.Row="6"
            Visibility="{Binding TextBlockCheckFinishedAndResultIsSuppOnlyIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Der Status für diese Kartenprüfung wird auf &quot;RequestCustomerFeedback&quot; gesetzt und ist für diesen Chip vorerst Abgeschlossen. Ein Klick auf &quot;Fertigstellen&quot; führt wieder zur Startseite."></Run>
        </TextBlock>
        
        <TextBlock 
            Margin="8,8" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="4" 
            Grid.Column="0" 
            Grid.Row="6"
            Visibility="{Binding TextBlockCheckFinishedIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Die Kartenprüfung für diesen Chip ist damit Abgeschlossen. Ein Klick auf &quot;Fertigstellen&quot; führt wieder zur Startseite."></Run>
        </TextBlock>

        <InfoBar
            Grid.Column="0"
            Grid.Row="5"
            Grid.ColumnSpan="4"
            Margin="15"
            IsOpen="True"
            IsIconVisible="True"
            IsClosable="False"
            Title="Hinweis:"
            Severity="Informational"
            Visibility="{Binding ReaderHasNoChipInfoBarIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Message="Um mit dem Auslesen der verbleibenden Speicherplatzes nach Programmierung Forfahren zu können, wird der soeben getestete Chip benötigt."/>
        
        <Button 
            Grid.Row="7"
            Grid.Column="0"
            Height="36"
            Margin="0,6,0,0"
            Padding="30,6"
            HorizontalAlignment="Left"
            IsEnabled="{Binding GoBackCanExecute, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Opacity="1"
            Command="{Binding NavigateBackCommand}"
            Content="Zurück">
            <Button.Resources>
                <ResourceDictionary>
                    <SolidColorBrush x:Key="ButtonBorderBrushDisabled" Opacity="0.6" Color="#BFBFBF" />
                    <SolidColorBrush x:Key="ButtonBackground" Color="IndianRed" />
                    <SolidColorBrush x:Key="ButtonBackgroundDisabled" Color="#73726e" />
                    <SolidColorBrush x:Key="ButtonBackgroundPressed" Color="#f5fa75" />
                    <SolidColorBrush x:Key="ButtonBackgroundPointerOver" Color="#c4c736" />

                    <SolidColorBrush x:Key="ButtonForegroundDisabled" Color="DarkGray" />

                    <SolidColorBrush x:Key="ButtonForeground" Color="Black" />
                    <SolidColorBrush x:Key="ButtonForegroundPointerOver" Color="White" />

                    <!--<SolidColorBrush x:Key="ButtonBorderBrush" Color="White" />-->
                    <!--<SolidColorBrush x:Key="ButtonBorderBrushPointerOver" Color="White" />-->
                    <!--<SolidColorBrush x:Key="ButtonBorderBrushFocused" Color="#ECF542" />-->
                    <!--<SolidColorBrush x:Key="ButtonBorderBrushPressed" Color="#ECF542" />-->

                    <SolidColorBrush x:Key="ButtonBackgroundFocused" Color="LightGreen" />

                </ResourceDictionary>
            </Button.Resources>
        </Button>
        <Button
            Grid.Row="7"
            Grid.Column="4"
            Height="36"
            Margin="0,6,8,0"
            Padding="30,6"
            HorizontalAlignment="Right"
            IsEnabled="{Binding NextStepCanExecute, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Opacity="1"
            Command="{Binding NavigateNextStepCommand}"
            Content="{Binding NextStepButtonContent}">
            <Button.Resources>
                <ResourceDictionary>
                    <SolidColorBrush
                        x:Key="ButtonBorderBrushDisabled"
                        Opacity="0.6"
                        Color="#BFBFBF" />
                    <SolidColorBrush x:Key="ButtonBackground" Color="LimeGreen" />
                    <SolidColorBrush x:Key="ButtonBackgroundDisabled" Color="#73726e" />
                    <SolidColorBrush x:Key="ButtonBackgroundPressed" Color="DarkGreen" />
                    <SolidColorBrush x:Key="ButtonBackgroundPointerOver" Color="Lime" />

                    <SolidColorBrush x:Key="ButtonForegroundDisabled" Color="DarkGray" />

                    <SolidColorBrush x:Key="ButtonForeground" Color="Black" />
                    <SolidColorBrush x:Key="ButtonForegroundPointerOver" Color="White" />

                    <!--<SolidColorBrush x:Key="ButtonBorderBrush" Color="White" />-->
                    <!--<SolidColorBrush x:Key="ButtonBorderBrushPointerOver" Color="White" />-->
                    <!--<SolidColorBrush x:Key="ButtonBorderBrushFocused" Color="#ECF542" />-->
                    <!--<SolidColorBrush x:Key="ButtonBorderBrushPressed" Color="#ECF542" />-->

                    <SolidColorBrush x:Key="ButtonBackgroundFocused" Color="LightGreen" />

                </ResourceDictionary>
            </Button.Resources>
        </Button>
    </Grid>
</Page>
