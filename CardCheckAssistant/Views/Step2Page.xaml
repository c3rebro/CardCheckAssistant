<Page
    x:Class="CardCheckAssistant.Views.Step2Page"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:svc="using:CardCheckAssistant.Services"
    xmlns:viewmodels="using:CardCheckAssistant.ViewModels"
    xmlns:ctWinUI="using:CommunityToolkit.WinUI.UI.Controls"
    xmlns:ctWinUIConv="using:CommunityToolkit.WinUI.UI.Converters"
    Loaded="Page_Loaded"
    mc:Ignorable="d">
    
    <Page.Resources>
        <viewmodels:Step2PageViewModel x:Name="Step2PageVM" />
        <ctWinUIConv:BoolToVisibilityConverter x:Key="boolean" />
    </Page.Resources>

    <Page.DataContext>
        <viewmodels:Step2PageViewModel />
    </Page.DataContext>

    <Grid 
        x:Name="ContentArea"
        Margin="0,0,0,0">
        <!-- Beef -->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="250"/>
            <ColumnDefinition Width="0.3*"/>
            <ColumnDefinition Width="0.4*"/>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <Border
            Grid.Row="0"
            Grid.Column="0"
            CornerRadius="8,8,8,8" Grid.ColumnSpan="5" Grid.RowSpan="11">
            <Border>
                <Border.Background>
                    <RadialGradientBrush>
                        <GradientStop Offset="0" Color="#1F000000" />
                        <GradientStop Offset="1" Color="#4F000000" />
                    </RadialGradientBrush>
                </Border.Background>

                <Grid>
                    <StackPanel
                        Orientation="Horizontal"
                        VerticalAlignment="Bottom"
                        HorizontalAlignment="Right">
                        <TextBlock
                        Margin="12"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Bottom"
                        FontSize="12"
                        Text="Aktueller Auftrag:" />
                        <TextBlock
                        Margin="12"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Bottom"
                        FontSize="12"
                        Text="{Binding JobNumber}" />
                    </StackPanel>

                </Grid>

            </Border>
        </Border>

        <ProgressRing 
            Grid.Column="0"
            Grid.Row="0"
            Grid.ColumnSpan="5"
            Grid.RowSpan="11"
            Width="auto"
            Height="auto"
            MaxWidth="250"
            MaxHeight="250"
            Margin="10"
            VerticalContentAlignment="Stretch"
            HorizontalContentAlignment="Stretch"
            Visibility="{x:Bind ViewModel.TextBlockCheckNotYetFinishedIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
        </ProgressRing>

        <ProgressRing 
            Grid.Column="0"
            Grid.Row="0"
            Grid.ColumnSpan="5"
            Grid.RowSpan="11"
            Width="auto"
            Height="auto"
            MaxWidth="250"
            MaxHeight="250"
            Margin="10"
            VerticalContentAlignment="Stretch"
            HorizontalContentAlignment="Stretch"
            Visibility="{x:Bind ViewModel.NavigateNextStepCommand.IsRunning, Converter={StaticResource boolean}, Mode=OneWay}">
        </ProgressRing>

        <Image
            Grid.Column="4"
            Grid.ColumnSpan="2"
            Grid.Row="0"
            Grid.RowSpan="11"
            Source="/Assets/yetmswait.gif"
            Opacity="0.5"
            HorizontalAlignment="Right"
            VerticalAlignment="Top"
            Stretch="None"
            Visibility="{x:Bind ViewModel.TextBlockCheckNotYetFinishedIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>

        <Image
            Grid.Column="4"
            Grid.ColumnSpan="2"
            Grid.Row="0"
            Grid.RowSpan="10"
            Source="/Assets/yetmsohno.png"
            Opacity="0.5"
            HorizontalAlignment="Right"
            VerticalAlignment="Top"
            Stretch="None" 
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsNotSuppIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>

        <Image
            Grid.Column="4"
            Grid.ColumnSpan="2"
            Grid.Row="0"
            Grid.RowSpan="11"
            Source="/Assets/yetmsohno.png"
            Opacity="0.5"
            HorizontalAlignment="Right"
            VerticalAlignment="Top"
            Stretch="None" 
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppOnlyIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>

        <Image
            Grid.Column="4"
            Grid.ColumnSpan="2"
            Grid.Row="0"
            Grid.RowSpan="11"
            Source="/Assets/yetmsok.png"
            Opacity="0.5"
            HorizontalAlignment="Right"
            VerticalAlignment="Top"
            Stretch="None" 
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>

        <TextBlock 
            Margin="8,8,0,0" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="5" 
            Grid.Column="0" 
            Grid.Row="0"
            Visibility="{x:Bind ViewModel.TextBlockCheckNotYetFinishedIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="RFiDGear wird gestartet...&#x0a;"></Run>
        </TextBlock>

        <TextBlock 
            Margin="8,8,0,0" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="5" 
            Grid.Column="0" 
            Grid.Row="0"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsNotSuppIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="RFiDGear hat die Karte geprüft und ist zu folgendem Ergebnis gekommen:&#x0a;
                 &#xa;Die Kartentechnologie wird leider nicht Unterstützt. Weitere Details sind dem erstelleten Bericht zu entnehmen.
                 &#xa;"></Run>
        </TextBlock>

        <TextBlock 
            Margin="8,8,0,0" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="5" 
            Grid.Column="0" 
            Grid.Row="0"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppOnlyIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="RFiDGear hat die Karte geprüft und ist zu folgendem Ergebnis gekommen:&#x0a;
                &#xa;Die Kartentechnologie wird Unterstützt. Aber: Die Karte ist so in der LSM nicht programmierbar. Weitere Details sind dem erstelleten Bericht zu entnehmen:
                &#xa;"></Run>
        </TextBlock>

        <TextBlock 
            Margin="8,8,0,8" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="5" 
            Grid.Column="0" 
            Grid.Row="0"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="RFiDGear hat die Karte geprüft und ist zu folgendem Ergebnis gekommen:
                 &#x0a;
                 &#x0a;Die Kartentechnologie wird Unterstützt und sollte in der LSM programmierbar sein.
                 &#xa;
                 &#xa;Bitte nimm den Chip vom Leser und fahre mit dem Prüfvorgang in der LSM fort. Kehre im Anschluss hierher zurück und lege den Chip wieder auf den Leser.
                 &#xa;"></Run>
            <Run Foreground="Crimson" FontWeight="ExtraBold" Text="&#xa;ACHTUNG: Vor dem nächsten Schritt muss der Bericht noch mit dem Prüfergebnis aus dem Programmiervorgang in der LSM vervollständigt werden."></Run>
        </TextBlock>

        <TextBlock
            Margin="8,8,0,8" 
            Grid.Column="0" 
            Grid.Row="1" 
            VerticalAlignment="Center" 
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Text="Verwendetes Template:"/>

        <!--ItemsSource="{ctWinUI:EnumValues Type=models:LsmCardTemplates}" -->
        <ComboBox
            Margin="8,8,8,8" 
            Grid.ColumnSpan="2" 
            Grid.Column="1" 
            Grid.Row="1" 
            VerticalAlignment="Center" 
            HorizontalAlignment="Stretch"
            ItemsSource="{x:Bind ViewModel.LsmCardTemplates}"
            ToolTipService.ToolTip="Auswahl:\nTemplate entsprechend der verfügbaren Sektoren.\n\nHinweis zur Sektorengröße: Die Größe der Sektoren ab Sektor 32 (nur Classic 4K) entsprechen jeweils 4 Sektoren niedriger Nummer.\\Beispiel: Für das Template MC1200L (benötigt 4 Sektoren) ist sowohl auf Sektor 3,4,5,6 als auch auf dem Sektor 32 genug Platz."
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            SelectedItem="{x:Bind ViewModel.SelectedLSMCardTemplate, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock ToolTipService.ToolTip="{Binding TemplateToolTip, Mode=OneTime}" Text="{Binding TemplateText}"/>
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>

        <TextBlock
            Margin="8,8,0,8" 
            Grid.Column="3" 
            Grid.Row="1" 
            VerticalAlignment="Center" 
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Text="Unterstützter Chiptyp:"/>

        <TextBlock 
            Margin="8,0,0,8" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="5" 
            Grid.Column="0" 
            Grid.Row="2"
            VerticalAlignment="Center" 
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Programmierung erfolgreich:"></Run>
        </TextBlock>

        <CheckBox
            Margin="8,0,0,8" 
            Grid.ColumnSpan="1" 
            Grid.Column="1" 
            VerticalAlignment="Center" 
            Content="Ja"
            Grid.Row="2"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            IsChecked="{x:Bind ViewModel.CheckBoxChipProgrammableYes, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"></CheckBox>

        <CheckBox
            Margin="8,0,0,8" 
            Grid.ColumnSpan="1" 
            Grid.Column="2" 
            VerticalAlignment="Center" 
            HorizontalAlignment="Left"
            Content="Nein"
            Grid.Row="2"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            IsChecked="{x:Bind ViewModel.CheckBoxChipProgrammableNo, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"></CheckBox>

        <TextBlock 
            Margin="8,0,0,8" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="5" 
            Grid.Column="0" 
            Grid.Row="3"
            VerticalAlignment="Center" 
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Funktionstest an der Schließung: "></Run>
        </TextBlock>

        <TextBox 
            Margin="8,0,8,40"
            TextWrapping="Wrap"
            Grid.ColumnSpan="3"
            Grid.Column="3"
            Grid.Row="5"
            Grid.RowSpan="6"
            MaxHeight="240"
            VerticalAlignment="Stretch" 
            AcceptsReturn="True"
            Text="{x:Bind ViewModel.TextBoxAdditionalHints, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Visibility="{x:Bind ViewModel.CheckBoxTestOnLockLimitedYes, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
        </TextBox>

        <TextBlock
            Margin="8,0,0,8" 
            Grid.Column="3" 
            Grid.Row="4" 
            VerticalAlignment="Center" 
            Visibility="{x:Bind ViewModel.CheckBoxTestOnLockLimitedYes, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Text="Zusatztextauswahl:"/>

        <ComboBox
            Margin="8,0,8,8" 
            Grid.ColumnSpan="1" 
            Grid.Column="4" 
            Grid.Row="4" 
            VerticalAlignment="Center" 
            HorizontalAlignment="Stretch"
            ItemsSource="{Binding TextTemplates}"
            PlaceholderText="Zusatztext auswählen..."
            ToolTipService.ToolTip=""
            Visibility="{x:Bind ViewModel.CheckBoxTestOnLockLimitedYes, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            SelectedItem="{x:Bind ViewModel.SelectedCardCheckTextTemplate, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock ToolTipService.ToolTip="{Binding TemplateToolTip, Mode=OneTime}" Text="{Binding TemplateTextName}"/>
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>

        <CheckBox
            Margin="8,0,0,8" 
            Grid.ColumnSpan="1" 
            Grid.Column="1" 
            VerticalAlignment="Center" 
            Content="Erfolgreich"
            Grid.Row="3"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            IsChecked="{x:Bind ViewModel.CheckBoxTestOnLockSuccess, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"></CheckBox>

        <CheckBox
            Margin="8,0,0,8" 
            Grid.ColumnSpan="1" 
            Grid.Column="2" 
            HorizontalAlignment="Left"
            VerticalAlignment="Center" 
            Content="Fehlgeschlagen"
            Grid.Row="3"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            IsChecked="{x:Bind ViewModel.CheckBoxTestOnLockFailed, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"></CheckBox>

        <TextBlock 
            Margin="8,0,0,8" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="1" 
            Grid.Column="0" 
            Grid.Row="4"
            VerticalAlignment="Center" 
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Funktion mit Einschränkungen: "></Run>
        </TextBlock>

        <CheckBox
            Margin="8,0,0,8" 
            Grid.ColumnSpan="1" 
            Grid.Column="1" 
            VerticalAlignment="Center" 
            Content="Ja"
            Grid.Row="4"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            IsChecked="{x:Bind ViewModel.CheckBoxTestOnLockLimitedYes, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"></CheckBox>

        <CheckBox
            Margin="8,0,0,8" 
            Grid.ColumnSpan="1" 
            Grid.Column="2" 
            VerticalAlignment="Center" 
            Content="Nein"
            Grid.Row="4"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            IsChecked="{x:Bind ViewModel.CheckBoxTestOnLockLimitedNo, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"></CheckBox>

        <TextBlock 
            Margin="8,0,0,8" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="2" 
            Grid.Column="0" 
            Grid.Row="5"
            VerticalAlignment="Center" 
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Freier Speicher vor der Prüfung:"></Run>
        </TextBlock>

        <TextBox 
            Margin="8,0,8,8"
            TextWrapping="Wrap"
            Grid.ColumnSpan="2"
            Grid.Column="1"
            Grid.Row="5"
            IsReadOnly="True"
            VerticalAlignment="Center" 
            Text="{x:Bind ViewModel.TextBlockFreeMem, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
        </TextBox>

        <TextBlock 
            Margin="8,0,0,8" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="1" 
            Grid.Column="0" 
            Grid.Row="6"
            VerticalAlignment="Center" 
            Visibility="{x:Bind ViewModel.IsSupportedAndIsClassicChip, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Verwendete Sektoren:"></Run>
        </TextBlock>

        <TextBox 
            Margin="8,0,8,8"
            TextWrapping="Wrap"
            Grid.ColumnSpan="2"
            Grid.Column="1"
            Grid.Row="6"
            VerticalAlignment="Center" 
            Text="{x:Bind ViewModel.TextBoxSectorsUsed, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Visibility="{x:Bind ViewModel.IsSupportedAndIsClassicChip, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
        </TextBox>

        <HyperlinkButton 
            Margin="8,0" 
            Grid.Column="0" 
            Grid.Row="7" 
            Content="Bericht aufrufen" 
            Command="{x:Bind ViewModel.OpenReportCommand}"
            Visibility="{x:Bind ViewModel.HyperlinkButtonReportIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>

        <HyperlinkButton 
            Margin="8,0,0,10" 
            Grid.Column="0" 
            Grid.Row="8" 
            Content="Speicherpfad anzeigen" 
            Command="{x:Bind ViewModel.OpenReportPathCommand}"
            Visibility="{x:Bind ViewModel.HyperlinkButtonReportIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>

        <TextBlock 
            Margin="8,8,0,0" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="3" 
            Grid.Column="0" 
            Grid.Row="9"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppAndProgIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Klicke danach auf Weiter, um zum letzten Schritt zu gelangen.
                 &#xa;"></Run>
        </TextBlock>

        <TextBlock 
            Margin="8,8,0,0" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="5" 
            Grid.Column="0" 
            Grid.Row="4"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsNotEnoughMemoryIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Die Kartentechnologie wird zwar Unterstütz, es ist jedoch kein Speicher mehr frei. (Free Memory &lt;= 224 Bytes)&#x0a;
            &#xa;Es besteht nun die möglichkeit, den Einsender der Karte über das Ergebnis zu informieren und ggf. weitere Informationen zu erbitten. Wähle hierfür bitte eine Textvorlage aus. Der Einsender hat 14 Tage Zeit diese Informationen zu übermitteln um die Prüfung erneut durch zu führen. Nach Ablauf der Zeit wird der Vorgang automatisch geschlossen."></Run>
        </TextBlock>


        <TextBlock 
            Margin="8,8" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="5" 
            Grid.Column="0" 
            Grid.Row="9"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedAndResultIsSuppOnlyIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Die Kartenprüfung für diesen Chip ist damit Abgeschlossen. Ein Klick auf &quot;Fertigstellen&quot; Lädt den Bericht in die Datenbank hoch und führt im Anschluss wieder zur Startseite."></Run>
        </TextBlock>

        <TextBlock 
            Margin="8,8" 
            TextWrapping="Wrap" 
            Grid.ColumnSpan="5" 
            Grid.Column="0" 
            Grid.Row="9"
            Visibility="{x:Bind ViewModel.TextBlockCheckFinishedIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Run Text="Die Kartenprüfung für diesen Chip ist damit Abgeschlossen. Ein Klick auf &quot;Fertigstellen&quot; Lädt den Bericht in die Datenbank hoch und führt im Anschluss wieder zur Startseite."></Run>
        </TextBlock>

        <InfoBar
            Grid.Column="0"
            Grid.Row="8"
            Grid.ColumnSpan="5"
            Margin="8,0"
            HorizontalAlignment="Stretch"
            IsOpen="True"
            IsIconVisible="True"
            IsClosable="False"
            Title="Bitte den geöffneten Bericht vor dem Fortfahren wieder schließen."
            Visibility="{x:Bind ViewModel.IsReportOpen, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Severity="Warning"
            />

        <InfoBar
            Grid.Column="4"
            Grid.Row="1"
            Grid.ColumnSpan="1"
            Margin="8,0"
            Width="400"
            HorizontalAlignment="Left"
            IsOpen="True"
            IsIconVisible="True"
            IsClosable="False"
            Title="{x:Bind ViewModel.InfoBarSupportedChipType, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Visibility="{x:Bind ViewModel.IsSupported, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Severity="Informational"
            />

        <InfoBar
            Grid.Column="0"
            Grid.Row="10"
            Grid.ColumnSpan="3"
            Margin="15"
            IsOpen="True"
            IsIconVisible="True"
            IsClosable="False"
            Title="Hinweis:"
            Severity="Informational"
            Visibility="{x:Bind ViewModel.ReaderHasNoChipInfoBarIsVisible, Converter={StaticResource boolean}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Message="Um mit dem Auslesen des verbleibenden Speicherplatzes nach Programmierung Forfahren zu können, wird: &#xa;&#x2022; der soeben getestete Chip benötigt sowie&#xa;&#x2022; das Ergebnis der Programmierung in der LSM (Checkboxen oben)"
            />

        <Button 
            Grid.Row="12"
            Grid.Column="0"
            Height="36"
            Margin="0,6,0,0"
            Padding="30,6"
            VerticalAlignment="Bottom"
            HorizontalAlignment="Left"
            IsEnabled="{x:Bind ViewModel.GoBackCanExecute, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Opacity="1"
            Command="{x:Bind ViewModel.NavigateBackCommand}"
            Content="Zurück">
            <Button.Resources>
                <ResourceDictionary>
                    <SolidColorBrush x:Key="ButtonBorderBrushDisabled" Opacity="0.6" Color="#BFBFBF" />
                    <SolidColorBrush x:Key="ButtonBackground" Color="IndianRed" />
                    <SolidColorBrush x:Key="ButtonBackgroundDisabled" Color="#73726e" />
                    <SolidColorBrush x:Key="ButtonBackgroundPressed" Color="#f5fa75" />
                    <SolidColorBrush x:Key="ButtonBackgroundPointerOver" Color="#c4c736" />

                    <SolidColorBrush x:Key="ButtonForegroundDisabled" Color="DarkGray" />

                    <SolidColorBrush x:Key="ButtonForeground" Color="Black" />
                    <SolidColorBrush x:Key="ButtonForegroundPointerOver" Color="White" />

                    <!--<SolidColorBrush x:Key="ButtonBorderBrush" Color="White" />-->
                    <!--<SolidColorBrush x:Key="ButtonBorderBrushPointerOver" Color="White" />-->
                    <!--<SolidColorBrush x:Key="ButtonBorderBrushFocused" Color="#ECF542" />-->
                    <!--<SolidColorBrush x:Key="ButtonBorderBrushPressed" Color="#ECF542" />-->

                    <SolidColorBrush x:Key="ButtonBackgroundFocused" Color="LightGreen" />

                </ResourceDictionary>
            </Button.Resources>
        </Button>
        <Button
            Grid.Row="12"
            Grid.Column="4"
            Height="36"
            Margin="0,6,8,0"
            Padding="30,6"
            HorizontalAlignment="Right"
            IsEnabled="{x:Bind ViewModel.NextStepCanExecute, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
            Opacity="1"
            Command="{x:Bind ViewModel.NavigateNextStepCommand}"
            Content="{x:Bind ViewModel.NextStepButtonContent, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Button.Resources>
                <ResourceDictionary>
                    <SolidColorBrush
                        x:Key="ButtonBorderBrushDisabled"
                        Opacity="0.6"
                        Color="#BFBFBF" />
                    <SolidColorBrush x:Key="ButtonBackground" Color="LimeGreen" />
                    <SolidColorBrush x:Key="ButtonBackgroundDisabled" Color="#73726e" />
                    <SolidColorBrush x:Key="ButtonBackgroundPressed" Color="DarkGreen" />
                    <SolidColorBrush x:Key="ButtonBackgroundPointerOver" Color="Lime" />

                    <SolidColorBrush x:Key="ButtonForegroundDisabled" Color="DarkGray" />

                    <SolidColorBrush x:Key="ButtonForeground" Color="Black" />
                    <SolidColorBrush x:Key="ButtonForegroundPointerOver" Color="White" />

                    <!--<SolidColorBrush x:Key="ButtonBorderBrush" Color="White" />-->
                    <!--<SolidColorBrush x:Key="ButtonBorderBrushPointerOver" Color="White" />-->
                    <!--<SolidColorBrush x:Key="ButtonBorderBrushFocused" Color="#ECF542" />-->
                    <!--<SolidColorBrush x:Key="ButtonBorderBrushPressed" Color="#ECF542" />-->

                    <SolidColorBrush x:Key="ButtonBackgroundFocused" Color="LightGreen" />

                </ResourceDictionary>
            </Button.Resources>
        </Button>
    </Grid>

</Page>
